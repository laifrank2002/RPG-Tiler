import javax.swing.*;
import java.awt.*;
/**
 * A JPanel that renders all of the map objects
 * 
 * @author Frank Lai
 * @version 2018-05-10
 */
public class RenderPanel extends JLayeredPane
{
    // constants
    private static final int TILE_HEIGHT = 50;
    private static final int TILE_WIDTH = 50;
    // instance variables
    private Map map;
    private ImageStore tileLib;
    private ImagePanel[][] mapTiles;
    private KeyInputListener keyInput;
    //private MapObject[] mapObjects;
    
    private int width;
    private int height;
    
    // offset ensures moving
    private int current_x;
    private int current_y;
    /**
     * Creates a default render panel with width and height features
     * 
     * @param width the width of the render
     * @param height the height of the render
     */
    public RenderPanel(int mapWidth, int mapHeight)
    {
        // initializes vars
        map = new Map();
        mapTiles = new ImagePanel[map.getXSize()][map.getYSize()];
        
        //
        
        MapObject mainchar = new MapObject(0,0,0);
        map.addMapObject(mainchar);

        MapObject legionaries[] = new MapObject[]{
                new MapObject(1,1,3)
            ,new MapObject(2,5,2)
            ,new MapObject(3,3,1)
            ,new MapObject(9,9,3)};

        for (MapObject mapO: legionaries)
        {
            map.addMapObject(mapO);
        }
        
        keyInput = new KeyInputListener();
        addKeyListener(keyInput);
        
        width = mapWidth;
        height = mapHeight;
        // ensures focus in order to respond to calls
        requestFocus();
        // local variables
        String[] tileLibPaths = new String[5];

        // declare all of the imagepaths
        tileLibPaths[0] = "example.png";
        tileLibPaths[1] = "images/plains.bmp";
        tileLibPaths[2] = "images/forest.bmp";
        tileLibPaths[3] = "images/castle.bmp";
        tileLibPaths[4] = "images/lake.bmp";

        // loads all the images
        tileLib = new ImageStore(tileLibPaths);

        // Other inits
        MapObject.initLoadImages();

        // Setup content JPanel
        setLocation(0,0);
        setSize(width,height);
        // Ensure custom layouts and abs positioning works
        setLayout(null); 
        // Sets up a 10 by 10 map 
        // Should be customizable to some degree
        // Will be controlled by a x-y coordinate system
        // That will allow the map to "move" so to speak
        
        /*
        for (int x = 0; x < 10; x ++)
        {
            for (int y = 0; y < 10; y ++)
            {
                // map index
                mapTiles[x][y] = new ImagePanel(tileLib.getImage(map.getTileType(x,y)));
                mapTiles[x][y].setLocation(x*50,y*50);
                mapTiles[x][y].setSize(50,50);

                // set to content.add later 
                add(mapTiles[x][y],new Integer(0));
            } // end for (int y = 0; y < 5; y ++)
        } // end for (int x = 0; x < 5; x ++)
        */
       
        ImagePanel mainCharacter = new ImagePanel(MapObject.characterSprites.getImage(mainchar.getImageIndex()));
        mainCharacter.setLocation(mainchar.getX() * 50,mainchar.getY() * 50);

        mainCharacter.setSize(50,50);
        mainCharacter.setOpaque(false);
        add(mainCharacter,new Integer(1));
        
        ImagePanel[] legionaryPics = new ImagePanel[legionaries.length];
        int i = 0;
        for (ImagePanel imgPnl: legionaryPics)
        {
            imgPnl = new ImagePanel(MapObject.characterSprites.getImage(legionaries[i].getImageIndex()));

            imgPnl.setLocation(legionaries[i].getX() *50, legionaries[i].getY() *50);
            imgPnl.setSize(50,50);
            imgPnl.setOpaque(false);
            add(imgPnl,new Integer(1));
            i++;
        }
        // Make sure it is visible
        setVisible(true);
    }

    /**
     * Updates components
     * 
     * @param graphics the graphics componenet, not used
     */
    public void paintComponent(Graphics graphics)
    {
        // Establish the graphics context.
        super.paintComponent(graphics);
        Graphics2D graphicsContext = (Graphics2D)graphics;
        
        // Draw the tiles.
        for (int x = 0; x < 10; x ++)
        {
            for (int y = 0; y < 10; y ++)
            {
                // draws and scales tile images on the fly
                graphicsContext.drawImage(tileLib.getImage(map.getTileType(x,y)),x*TILE_WIDTH,y*TILE_HEIGHT,(x+1)*TILE_WIDTH,(y+1)*TILE_HEIGHT
                    ,0,0, tileLib.getImage(map.getTileType(x,y)).getWidth(),tileLib.getImage(map.getTileType(x,y)).getHeight(), this);
            } // end for (int y = 0; y < 5; y ++)
        } // end for (int x = 0; x < 5; x ++)
        
        // Draw the map objects.
        
        // Draws main character.
        graphicsContext.drawImage(MapObject.characterSprites.getImage(map.getMapObject(0).getImageIndex())
            ,map.getMapObject(0).getX() * 50,map.getMapObject(0).getY() * 50, (map.getMapObject(0).getX()+1) * 50,(map.getMapObject(0).getY()+1) * 50
            ,0,0,MapObject.characterSprites.getImage(map.getMapObject(0).getImageIndex().getWidth(),MapObject.characterSprites.getImage(map.getMapObject(0).getImageIndex().getHeight())
            ,this);
        ImagePanel mainCharacter = new ImagePanel(MapObject.characterSprites.getImage(map.getMapObject(0).getImageIndex()));
        mainCharacter.setLocation(map.getMapObject(0).getX() * 50,map.getMapObject(0).getY() * 50);
    }
    
    /**
     * Adds new mapobject to main class.
     */
    public void addMapObject(MapObject mapObject)
    {
        map.addMapObject(mapObject);
        
    }
}